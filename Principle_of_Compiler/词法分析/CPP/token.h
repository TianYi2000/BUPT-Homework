#pragma once
#include <string>
#include <map>
using namespace std;

enum TokenType
{
    UNKNOWN = 0,
    IGNORE,

    CHAR,
    INT,
    LONG,
    FLOAT,
    DOUBLE,
    VOID,
    UNSIGNED,
    SIGNED,
    CONST,
    STATIC,
    EXTERN,
    STRUCT,
    UNION,
    TYPEDEF,
    SIZEOF,

    IF,
    ELSE,
    DO,
    WHILE,
    FOR,
    SWITCH,
    CASE,
    DEFAULT,
    CONTINUE,
    BREAK,
    GOTO,

    RETURN,
    ASSIGN,
    ADD,
    SELF_INCREASE,
    ADD_ASSIGN,
    SUB,
    SELF_DECREASE,
    DEC,
    SUB_ASSIGN,
    MUL_ASSIGN,
    DIV,
    DIV_ASSIGN,
    MOD,
    MOD_ASSIGN,
    BITWISE_AND,
    BITWISE_AND_ASSIGN,
    BITWISE_OR,
    BITWISE_OR_ASSIGN,
    BITWISE_XOR,
    BITWISE_XOR_ASSIGN,
    BITWISE_NOT,
    SHL,
    SHL_ASSIGN,
    SHR,
    SHR_ASSIGN,
    AND,
    AND_ASSIGN,
    OR,
    OR_ASSIGN,
    NOT,
    LESS,
    LESS_OR_EQUAL,
    EQUAL,
    NOT_EQUAL,
    INEUQUAL,
    GREATER,
    GREATER_OR_EQUAL,
    CONNECT,
    ASTERISK,
    AMPERSAND,
    QUESTION,
    COMMA,
    COLON,
    SEMICOLON,
    DOT,
    STAR,
    ARROW,
    LEFT_PARENTHESIS,
    RIGHT_PARENTHESIS,
    LEFT_BRACKET,
    RIGHT_BRACKET,
    LEFT_BRACE,
    RIGHT_BRACE,

    LINE_BREAK,
    END,
    EPSILON,

    PREPROCESSOR,
    LINE_COMMENT,
    BLOCK_COMMENT,
    IDENTIFIER,
    CONSTANT_INT,
    CONSTANT_REAL,
    CONSTANT_SCIENTIFIC,
    CONSTANT_CHAR,
    CONSTANT_STRING,

    UNKNOWN_ERROR,
    INCOMPLETE_NUMBERIC_ERROR,
    UNCLOSED_BLOCK_COMMENT_ERROR,
    UNCLOSED_CHAR_ERROR,
    ESCAPE_CHARACTER_NOT_EXIST,
    TOO_MUCH_CHARACTER,
    UNFINISHED_STRING_ERROR,
    ILLEGAL_CHAR_ERROR,
};

inline map<string, TokenType> ReservedWord = {
    {"char", CHAR},
    {"int", INT},
    {"long", LONG},
    {"float", FLOAT},
    {"double", DOUBLE},
    {"void", VOID},
    {"unsigned", UNSIGNED},
    {"signed", SIGNED},
    {"const", CONST},
    {"static", STATIC},
    {"extern", EXTERN},
    {"struct", STRUCT},
    {"union", UNION},
    {"typedef", TYPEDEF},
    {"sizeof", SIZEOF},
    {"if", IF},
    {"else", ELSE},
    {"do", DO},
    {"while", WHILE},
    {"for", FOR},
    {"switch", SWITCH},
    {"case", CASE},
    {"default", DEFAULT},
    {"continue", CONTINUE},
    {"break", BREAK}
};

inline map<TokenType, string> TypeName = {
    {UNKNOWN, "UNKNOWN"},
    {IGNORE, "IGNORE"},
    {CHAR, "CHAR"},
    {INT, "INT"},
    {LONG, "LONG"},
    {FLOAT, "FLOAT"},
    {DOUBLE, "DOUBLE"},
    {VOID, "VOID"},
    {UNSIGNED, "UNSIGNED"},
    {SIGNED, "SIGNED"},
    {CONST, "CONST"},
    {STATIC, "STATIC"},
    {EXTERN, "EXTERN"},
    {STRUCT, "STRUCT"},
    {UNION, "UNION"},
    {TYPEDEF, "TYPEDEF"},
    {SIZEOF, "SIZEOF"},
    {IF, "IF"},
    {ELSE, "ELSE"},
    {DO, "DO"},
    {WHILE, "WHILE"},
    {FOR, "FOR"},
    {SWITCH, "SWITCH"},
    {CASE, "CASE"},
    {DEFAULT, "DEFAULT"},
    {CONTINUE, "CONTINUE"},
    {BREAK, "BREAK"},
    {GOTO, "GOTO"},
    {RETURN, "RETURN"},
    {ASSIGN, "ASSIGN"},
    {ADD, "ADD"},
    {SELF_INCREASE, "SELF_INCREASE"},
    {ADD_ASSIGN, "ADD_ASSIGN"},
    {SUB, "SUB"},
    {SELF_DECREASE, "SELF_DECREASE"},
    {DEC, "DEC"},
    {SUB_ASSIGN, "SUB_ASSIGN"},
    {MUL_ASSIGN, "MUL_ASSIGN"},
    {DIV, "DIV"},
    {DIV_ASSIGN, "DIV_ASSIGN"},
    {MOD, "MOD"},
    {MOD_ASSIGN, "MOD_ASSIGN"},
    {BITWISE_AND, "BITWISE_AND"},
    {BITWISE_AND_ASSIGN, "BITWISE_AND_ASSIGN"},
    {BITWISE_OR, "BITWISE_OR"},
    {BITWISE_OR_ASSIGN, "BITWISE_OR_ASSIGN"},
    {BITWISE_XOR, "BITWISE_XOR"},
    {BITWISE_XOR_ASSIGN, "BITWISE_XOR_ASSIGN"},
    {BITWISE_NOT, "BITWISE_NOT"},
    {SHL, "SHL"},
    {SHL_ASSIGN, "SHL_ASSIGN"},
    {SHR, "SHR"},
    {SHR_ASSIGN, "SHR_ASSIGN"},
    {AND, "AND"},
    {AND_ASSIGN, "AND_ASSIGN"},
    {OR, "OR"},
    {OR_ASSIGN, "OR_ASSIGN"},
    {NOT, "NOT"},
    {LESS, "LESS"},
    {LESS_OR_EQUAL, "LESS_OR_EQUAL"},
    {EQUAL, "EQUAL"},
    {NOT_EQUAL, "NOT_EQUAL"},
    {INEUQUAL, "INEUQUAL"},
    {GREATER, "GREATER"},
    {GREATER_OR_EQUAL, "GREATER_OR_EQUAL"},
    {CONNECT, "CONNECT"},
    {ASTERISK, "ASTERISK"},
    {AMPERSAND, "AMPERSAND"},
    {QUESTION, "QUESTION"},
    {COMMA, "COMMA"},
    {COLON, "COLON"},
    {SEMICOLON, "SEMICOLON"},
    {DOT, "DOT"},
    {STAR, "STAR"},
    {ARROW, "ARROW"},
    {LEFT_PARENTHESIS, "LEFT_PARENTHESIS"},
    {RIGHT_PARENTHESIS, "RIGHT_PARENTHESIS"},
    {LEFT_BRACKET, "LEFT_BRACKET"},
    {RIGHT_BRACKET, "RIGHT_BRACKET"},
    {LEFT_BRACE, "LEFT_BRACE"},
    {RIGHT_BRACE, "RIGHT_BRACE"},
    {LINE_BREAK, "LINE_BREAK"},
    {END, "END"},
    {EPSILON, "EPSILON"},
    {PREPROCESSOR, "PREPROCESSOR"},
    {LINE_COMMENT, "LINE_COMMENT"},
    {BLOCK_COMMENT, "BLOCK_COMMENT"},
    {IDENTIFIER, "IDENTIFIER"},
    {CONSTANT_INT, "CONSTANT_INT"},
    {CONSTANT_REAL, "CONSTANT_REAL"},
    {CONSTANT_SCIENTIFIC, "CONSTANT_SCIENTIFIC"},
    {CONSTANT_CHAR, "CONSTANT_CHAR"},
    {CONSTANT_STRING, "CONSTANT_STRING"},
    {UNKNOWN_ERROR, "UNKNOWN_ERROR"},

    {ILLEGAL_CHAR_ERROR, "ILLEGAL_CHAR_ERROR"},
    {INCOMPLETE_NUMBERIC_ERROR, "INCOMPLETE_NUMBERIC_ERROR"},
    {UNCLOSED_BLOCK_COMMENT_ERROR, "UNCLOSED_BLOCK_COMMENT_ERROR"},
    {UNCLOSED_CHAR_ERROR, "UNCLOSED_CHAR_ERROR"},
    {ESCAPE_CHARACTER_NOT_EXIST, "ESCAPE_CHARACTER_NOT_EXIST"},
    {TOO_MUCH_CHARACTER, "TOO_MUCH_CHARACTER"},
    {UNFINISHED_STRING_ERROR, "UNFINISHED_STRING_ERROR"}
};

class Token
{
public:
    Token();
    Token(const int, const int);
    Token(const int, const int, const TokenType);
    ~Token();

    TokenType type;
    int linePos, colPos;
    string val;
};
